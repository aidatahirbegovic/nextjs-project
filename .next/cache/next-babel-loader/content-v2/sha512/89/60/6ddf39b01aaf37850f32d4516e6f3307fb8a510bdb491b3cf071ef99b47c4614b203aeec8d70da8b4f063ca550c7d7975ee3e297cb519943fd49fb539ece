{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\"; //our-doman.com/new-meetup\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: props.meetupData.title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      })]\n    }), /*#__PURE__*/_jsx(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    })]\n  });\n} // image=\"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\"\n//       title=\"A First Meetup\"\n//       address=\"Some address 5, 1235 Some City\"\n//       description=\"This is a first meetup!\"\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://user-aida:aidaturska995.@cluster0.djm6g.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //finds all documents in collection\n  // {} empty object means give me all objects - first parameter\n  // second parameter is fields that we want to return - {_id: 1} only include id, not other\n\n  client.close(); //returns object where we describe all dynamic values\n\n  return {\n    fallback: false,\n    //this key tells js weather all keys in ppaths have suported value or just some of them\n    //false - all paths suport meetupIds values - if someone enters m3, they will see 404 errir\n    //true - they will try to generate a page for this id dynamicly\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) //generating array of paths dynamicly\n    //[\n    //   //array of versions, multiple objects, one obejct per version of dynamic page\n    //   {\n    //     params: {\n    //       //object with all the key values that might lead to dynamic page\n    //       meetupId: \"m1\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m2\",\n    //     },\n    //   },\n    // ],\n\n  };\n}\nexport async function getStaticProps(context) {\n  //all versions for all ids are pregenerated\n  //fetch data fro single meetup\n  //context will not hold request and response but it will have params key\n  const meetupId = context.params.meetupId; //object where identifiers will be [] we have meetupId\n\n  console.log(meetupId);\n  const client = await MongoClient.connect(\"mongodb+srv://user-aida:aidaturska995.@cluster0.djm6g.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      } // {\n      //   image:\n      //     \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n      //   id: meetupId,\n      //   title: \"A First Meetup\",\n      //   address: \"Some address 5, 1235 Some City\",\n      //   description: \"This is a first meetup!\",\n      // },\n\n    }\n  };\n}\nexport default MeetupDetails;","map":null,"metadata":{},"sourceType":"module"}